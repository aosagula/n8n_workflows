"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.overwritePayloadFields = exports.overwritePayloadOperation = void 0;
const Commons_1 = require("./Commons");
exports.overwritePayloadOperation = {
    name: 'Overwrite Payload',
    value: 'overwritePayload',
    action: 'Overwrite Payload',
    description: 'Replaces the entire payload of specified points with a new payload',
    routing: {
        request: {
            method: 'PUT',
            url: '=/collections/{{$parameter.collectionName}}/points/payload',
            body: {
                payload: '={{JSON.parse($parameter.payload)}}',
                points: '={{JSON.parse($parameter.points)}}',
                filter: '={{JSON.parse($parameter.filter)}}',
                shard_key: '={{JSON.parse($parameter.shardKey)}}',
                key: '={{$parameter.key ? $parameter.key : null}}',
            },
            qs: {
                wait: '={{$parameter.wait}}',
                ordering: '={{$parameter.ordering}}',
            },
        },
    },
};
exports.overwritePayloadFields = [
    (0, Commons_1.collectionNameField)('overwritePayload'),
    {
        displayName: 'Payload',
        name: 'payload',
        description: 'New payload values to overwrite the existing ones',
        default: '{}',
        type: 'json',
        required: true,
        displayOptions: {
            show: {
                operation: ['overwritePayload'],
            },
        },
    },
    {
        displayName: 'Points',
        name: 'points',
        description: 'List of point IDs to overwrite payload for',
        default: '[]',
        type: 'json',
        displayOptions: {
            show: {
                operation: ['overwritePayload'],
            },
        },
    },
    (0, Commons_1.filterField)('overwritePayload'),
    {
        displayName: 'Key',
        name: 'key',
        description: 'Assigns payload to each point that satisfy this path of property',
        default: '',
        type: 'string',
        displayOptions: {
            show: {
                operation: ['overwritePayload'],
            },
        },
    },
    (0, Commons_1.shardKeyField)('overwritePayload'),
    (0, Commons_1.waitField)('overwritePayload'),
    (0, Commons_1.orderingField)('overwritePayload'),
];
//# sourceMappingURL=OverwritePayload.js.map